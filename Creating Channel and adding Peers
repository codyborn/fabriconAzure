The hyperledger fabric template "Hyperledger Fabric Single Member Blockchain" on Azure provisions a set of virutal machines with the following components deployed. 
1. CA, hyperledger/fabric-ca:x86_64-1.0.1
2. Orderer, hyperledger/fabric-orderer:x86_64-1.0.1
3. Peers (2 nodes - peer0 and peer1), hyperledger/fabric-peer:x86_64-1.0.1
all of these on separate virtual machines but within the same virtual network. 
The template deployment process does not create any channel, so this doc outlines the steps to 
1. Create a channel 
2. Add both the peers to the same channel 

As a pre-requisite, we should have deployed the Hyperledger Fabric template from the Azure Market Place and have the nodes running. In case you need to deploy it, please refer to this doc - https://gallery.technet.microsoft.com/Hyperledger-Fabric-Single-2324cecb 

Step 1 - Creating a Channel 

1. SSH into the peer0. You should be able to find the IP address from the portal and the port is 3002 
ssh azureuser@<Your IP Address> -p 3002 

2. Verify that the peer has been started 
docker ps -a

3. Stop the peer 
Ydocker stop <containername>

4. Restart the peer using the following commands

Setting the environment variables:
PEER_PREFIX="<your-prefix>-peer"
NODE_INDEX="0"
PEER_ORG_DOMAIN="org1.example.com" 
ORDERER_ORG_DOMAIN="example.com"
FABRIC_VERSION="x86_64-1.0.1"

Starthing the peer:
docker run -d --restart=always -p 7051:7051 -p 7053:7053 \
-e CORE_PEER_ID=${PEER_PREFIX}${NODE_INDEX}.${PEER_ORG_DOMAIN} \
-e CORE_PEER_LOCALMSPID=Org1MSP \
-e CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock \
-v /var/run:/host/var/run \
-v $HOME/configtx.yaml:/etc/hyperledger/fabric/configtx.yaml \
-v $HOME/crypto-config:/crypto-config \
-v $HOME/channel.tx:/channel.tx \     
-v $HOME/crypto-config/peerOrganizations/${PEER_ORG_DOMAIN}/peers/${PEER_PREFIX}${NODE_INDEX}.${PEER_ORG_DOMAIN}/msp:/etc/hyperledger/fabric/msp \
hyperledger/fabric-peer:${FABRIC_VERSION} peer node start --peer-defaultchain=false || unsuccessful_exit "Failed to start peer" 

5. Creating the channel 

Verify the container is up and the peer is running 

Get into the peer 
docker exec -it <container-name> /bin/bash 

Set the environment variables:
export CORE_PEER_ADDRESS=<your-prefix>-peer0:7051
export CORE_PEER_LOCALMSPID="Org1MSP"
export CORE_PEER_MSPCONFIGPATH=/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp

Create the channel, we will use the name "mychannel", you could replace it with any other name
peer channel create -o <your-prefix>-orderer0:7050 -c mychannel -f channel.tx
this will create the genesis block generally the name of the file will be channelname.block, so in our case it is mychannel.block

6. Join this peer to the channel:
peer channel join -b mychannel.block

7. Copy the genesis block to the host outside the container 
Exit to the host VM 
exit 
Copy the file from container to the host 
docker cp <container-name>:/mychannel.block mychannel.block 

Step 2 - Adding another Peer to the channel 

1. SSH into the peer1. You should be able to find the IP address from the portal and the port is 3002 
ssh azureuser@<Your IP Address> -p 3003 

2. Verify that the peer has been started 
docker ps -a

3. Copy the genesis block from peer0 to peer1 
scp -o StrictHostKeyChecking=no -r "<your-prefix>-peer0:~/mychannel.block" .  || unsuccessful_exit "Failed to copy file" 
docker cp mychannel.block <container-name>:/mychannel.block

Get into the peer 
docker exec -it <container-name> /bin/bash 

4. Join the peer to the channel 
Setting the environment variables:
export CORE_PEER_ADDRESS=<your-prefix>-peer1:7051
export CORE_PEER_LOCALMSPID="Org1MSP"
export CORE_PEER_MSPCONFIGPATH=/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp

Joining the peer to the channel:
peer channel join -b mychannel.block -o <your-prefix>-orderer0:7050

Validate that the peers have joined the channel:
peer channel list 

This completes the process of creating a channel and joining the two peers to the channel. 

